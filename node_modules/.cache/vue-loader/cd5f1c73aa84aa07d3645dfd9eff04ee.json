{"remainingRequest":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/NATALIA/Documents/UiG/src/components/Summary.vue?vue&type=template&id=4ec396a6&","dependencies":[{"path":"/Users/NATALIA/Documents/UiG/src/components/Summary.vue","mtime":1591727952583},{"path":"/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3VtbWFyeSIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWluLWNvbnRhaW5lciIgfSwgWwogICAgICBfdm0uX20oMCksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JhcGhpY3MiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImRvdWJsZS1ncmFwaGljIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyYXBoaWMgYWxwaGEiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItOTAiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyYXBoaWMtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQWxwaGEgIiArIF92bS5fcyhfdm0uYWxwaGEpKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZ3Jlc3MtY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2dyZXNzIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicHJvZ3Jlc3MtYmFyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICIjMThCNTczIiwKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF92bS5hbHBoYXByb2dyZXNzICsgIiUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByb2dyZXNzLW5hbWUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uYWxwaGFwcm9ncmVzcykgKyAiJSAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb3JlLXRhc2siIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItOTAiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyYXBoaWMtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ29yZSB0YXNrOiAiICsgX3ZtLl9zKF92bS50YXNrKSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInByb2dyZXNzIiB9LAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wcm9ncmVzcywgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmlkLAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwcm9ncmVzcy1iYXIiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogaXRlbS5pc0RvbmUgPyAiIzE4QjU3MyIgOiAiIzMyODJGQSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAoaXRlbS5jb3VudCAvIF92bS50YXNrKSAqIDEwMCArICIlIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwcm9ncmVzcy1uYW1lIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoaXRlbS5jb3VudCkgKyAiICIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGl0ZW0uaXNEb25lID8gImRvbmUiIDogImluIHByb2dyZXNzIikpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyYXBoaWMgaGVhbHRoIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1oZWFsdGgiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaXJjbGUtd3JhcCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2lyY2xlIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNpcmNsZV9fcmFuZ2UiLAogICAgICAgICAgICAgICAgICBzdHlsZTogeyB0cmFuc2Zvcm06ICJyb3RhdGUoLSIgKyBfdm0uY2lyY2xlcyArICJkZWcpIiB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2lyY2xlLXJlcyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uLWhlYWx0aCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltZy9oZWFsdGguc3ZnIiksIGFsdDogIiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKF92bS5jaXJjbGVSZXMpICsgIiUgIiksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNwZWVkIiB9LCBbX3ZtLl92KCIyJSDihpEiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaXJjbGUtbWluIiB9LCBbX3ZtLl92KCIwJSIpXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaXJjbGUtbWF4IiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jaXJjbGUpICsgIiUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oMykKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICBfdm0uX3YoIlByb2plY3QgRGFzaGJvYXJkICIpLAogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgbmFtZTogInN1bW1hcnkiIH0gfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib25lLXBvaW50IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib25lLXBvaW50LXRleHQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvaW50LXRleHQtc3BhbiIgfSwgWwogICAgICAgICAgX3ZtLl92KCJFc3RpbWF0ZSBEYXRlIikKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvaW50LXRleHQtZGF0YSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJBdWd1c3QgMTcsIDIwMjAiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInBvaW50LWNpcmNsZSIgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidHdvLXBvaW50IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9pbnQtY2lyY2xlIiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0d28tcG9pbnQtdGV4dCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9pbnQtdGV4dC1zcGFuIiB9LCBbX3ZtLl92KCJQbGFubmVkIERhdGUiKV0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicG9pbnQtdGV4dC1kYXRhIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkF1Z3VzdCAyMywgMjAyMCIpCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhbHRoLXRleHQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFsdGgtdGV4dC10aXRsZSIgfSwgWwogICAgICAgIF92bS5fdigiUHJvamVjdCBIZWFsdGgiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFsdGgtdGV4dC1pbmZvIiB9LCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBQcm9qZWN0IGhlYWx0aCBpcyBhbiBpbnRlZ3JhdGVkIG1ldHJpYyBiYXNlZCBvbiB0ZWFtIHNwZWVkLCB3b3JrIHF1YWxpdHksIGFuZCBvcmdhbml6YXRpb24gZGVncmVlLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}