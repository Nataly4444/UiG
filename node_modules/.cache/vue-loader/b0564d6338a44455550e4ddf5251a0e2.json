{"remainingRequest":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/NATALIA/Documents/UiG/src/components/LastMinutes.vue?vue&type=template&id=32d0e22e&","dependencies":[{"path":"/Users/NATALIA/Documents/UiG/src/components/LastMinutes.vue","mtime":1591788732593},{"path":"/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js","mtime":1591788726967},{"path":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1591788731916},{"path":"/Users/NATALIA/Documents/UiG/node_modules/cache-loader/dist/cjs.js","mtime":1591788726967},{"path":"/Users/NATALIA/Documents/UiG/node_modules/vue-loader/lib/index.js","mtime":1591788731916}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}